#!/usr/bin/python3.6



import sys
import ctypes

class Client:

	def __init__(self, sock_fd, ia_com, args, len):
		self.sock_fd = sock_fd
		self.team = args[1][:len].decode('utf-8')
		self.id = "NewPlayer"
		self.food = 9
		self.ressources = [0, 0, 0, 0, 0, 0]
		self.ressources_name = ["limemate", "deraumere", "sibur",
		"mendiane", "phiras", "thistame"]
		self.buffer = (ctypes.c_char * 4096)()
		self.memory_message = ""
		self.ia_com = ia_com

	def send(self, message_string):
		print (message_string)
		enc_message = message_string.encode('utf-8')
		message = ctypes.create_string_buffer(enc_message)
		self.ia_com.client_send(self.sock_fd, message)

	def receive(self):
		buff_str = ""
		is_number = False
		while not buff_str.startswith('[') \
		and not buff_str.startswith("ok") \
		and not buff_str.startswith("ko") \
		and is_number is False:
			self.ia_com.client_receive(self.sock_fd, self.buffer)
			buff_str = self.buffer.value.decode(
				'utf-8').split("\n", 1)[0]
			try:
				int(buff_str)
				is_number = True
			except ValueError:
				is_number = False
			if self.id in buff_str:
				self.memory_message = buff_str
			if self.memory_message is None \
			and (self.team + ":all:") in buff_str:
				self.memory_message = buff_str

	def connect(self, args):
		self.ia_com.client_receive(self.sock_fd, self.buffer)
		self.ia_com.client_send(self.sock_fd, args[1])
		self.ia_com.client_receive(self.sock_fd, self.buffer)

	def first_actions(self):
		self.send("Broadcast " + self.team + ":all:NewPlayer")
		self.receive()
		self.send("Look")
		self.receive()
		self.send("Inventory")
		self.receive()
		if self.id in self.memory_message:
			print (self.memory_message)
			self.id = self.memory_message.split("NewPlayer:", 1)[1]
		else:
			self.id = "0"
		print(self.id)

	def fork(self):
		self.send("Fork")
		self.receive()

def	launch_client(ia_com, args):
	sock_fd = ia_com.init_socket()
	if (sock_fd < 0):
		return (84)
	if (ia_com.init_connection(args, sock_fd) == 84):
		return (84)

	len_team_name = ia_com.get_len_team_name(args)
	myClient = Client(sock_fd, ia_com, args, len_team_name)
	myClient.connect(args)
	myClient.first_actions()
	return (ia_com.stop_socket(sock_fd))

def	main():
	ia_com = ctypes.CDLL('libia.so')
	LP_c_char = ctypes.POINTER(ctypes.c_char)
	LP_LP_c_char = ctypes.POINTER(LP_c_char)
	ia_com.get_args.argtypes = (ctypes.c_int, LP_LP_c_char)
	ia_com.get_args.restype = LP_LP_c_char
	argc = len(sys.argv)
	argv = (LP_c_char * (argc + 1))()
	for i, arg in enumerate(sys.argv):
		enc_arg = arg.encode('utf-8')
		argv[i] = ctypes.create_string_buffer(enc_arg)

	if (ia_com.get_help(argc, argv) == 0):
		return (0)
	args = ia_com.get_args(argc, argv)
	if args is None:
		return (84)
	if (ia_com.check_args(args) == 84):
		return (84)
	return (launch_client(ia_com, args))

exit(main())