#!/usr/bin/python3.6

import sys
import ctypes
import math


class Client:

	def __init__(self, sock_fd, ia_com, args, len):
		self.sock_fd = sock_fd
		self.team = args[1][:len].decode('utf-8')
		self.id = "NewPlayer"
		self.is_alive = True
		self.level = 1
		self.list_client = "0"
		self.ressources = [9, 0, 0, 0, 0, 0, 0]
		self.ressources_limit = [9999, 9, 8, 10, 5, 6, 1]
		self.ressources_name = ["food", "linemate", "deraumere",
				"sibur", "mendiane", "phiras", "thystame"]
		self.ressources_incant = [[1, 0, 0, 0, 0, 0],
				[1, 1, 1, 0, 0, 0], [2, 0, 1, 0, 2, 0],
				[1, 1, 2, 0, 1, 0], [1, 2, 1, 3, 0, 0],
				[1, 2, 3, 0, 1, 0], [2, 2, 2, 2, 2, 1]]
		self.res = True
		self.looked = ""
		self.buffer = (ctypes.c_char * 4096)()
		self.buff_str = ""
		self.memory_message = []
		self.ia_com = ia_com
		self.follow = {1 : self.forward,
			2 : self.forward,
			3 : self.left,
			4 : self.left,
			5 : self.left,
			6 : self.right,
			7 : self.right,
			8 : self.forward,
	}
	def check_dead(self):
		if self.is_alive is True:
			return 0
		return 84

	def send(self, message_string):
		print(message_string)
		enc_message = message_string.encode('utf-8')
		message = ctypes.create_string_buffer(enc_message)
		if self.ia_com.client_send(self.sock_fd, message) == 84:
			return 84
		return 0

	def receive(self):
		is_number = False
		self.buff_str = ""
		while (not self.buff_str.startswith('[') \
				and not self.buff_str.startswith("ok") \
				and not self.buff_str.startswith("ko") \
				and is_number is False):
			if self.ia_com.client_receive(
				self.sock_fd, self.buffer)== 84:
				return 84
			self.buff_str = self.buffer.value.decode(
					'utf-8').split("\n", 1)[0]
			print(self.buff_str)
			if self.buff_str.startswith("dead"):
				self.isAlive = False
				return 84
			try:
				int(self.buff_str)
				is_number = True
			except ValueError:
				is_number = False
			if self.team in self.buff_str:
				self.memory_message.append(self.buff_str)
		self.res = True if self.buff_str.startswith("ok") else False
		return 0

	def connect(self, args):
		if self.ia_com.client_receive(self.sock_fd, self.buffer) == 84:
			return 84
		if "WELCOME\n" not in self.buffer.value.decode('utf-8'):
			print("Error: Client not connected to a zappy server")
			return 84
		if self.ia_com.client_send(self.sock_fd, args[1]) == 84:
			return 84
		if self.ia_com.client_receive(self.sock_fd, self.buffer):
			return 84
		if "ko\n" in self.buffer.value.decode('utf-8'):
			print("Error: Bad Team Name. Retry to connect with an" \
			+ " allowed team name")
			return self.ia_com.return_error(self.sock_fd)
		return 0

	def forward(self):
		if self.send("Forward") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def left(self):
		if self.send("Left") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def right(self):
		if self.send("Right") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def look(self):
		if self.send("Look") == 84:
			return 84
		if self.receive() == 84:
			return 84
		self.looked = self.buff_str
		return 0

	def inventory(self):
		if self.send("Inventory") == 84:
			return 84
		if self.receive() == 84:
			return 84
		self.ressources[0] = int(self.buff_str.split(",", 1)[0]
				.split("food ", 1)[1])
		return 0

	def broadcast(self, message):
		if self.send("Broadcast " + message) == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def get_team_slots(self):
		if self.send("Connect_nbr") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def fork(self):
		if self.send("Fork") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def take_item(self, item):
		if self.send("Take " + item) == 84:
			return 84
		if self.receive() == 84:
			return 84
		if self.res is True:
			for i, l_item in enumerate(self.ressources_name):
				if l_item is item:
					self.ressources[i] += 1
					print(self.ressources)
		return 0

	def set_item(self, item):
		if self.send("Set " + item) == 84:
			return 84
		if self.receive() == 84:
			return 84
		if self.res is True:
			for i, l_item in enumerate(self.ressources_name):
				if l_item is item:
					self.ressources[i] -= 1
		return 0

	def incantation(self):
		if self.send("Incant") == 84:
			return 84
		if self.receive() == 84:
			return 84
		return 0

	def master(self):
		while (1):
			if self.inventory() == 84:
				return 84
			if self.get_ressources() == 84:
				return 84
			message = self.check_messages("IncantNow")
			if message is not None and self.ressources[0] >= 25:
				self.follow_incant(message)
			i = 0
			check_incant = True
			while i < len(self.ressources_incant[self.level]) and check_incant is True:
				if self.ressources[i + 1] < self.ressources_incant[self.level][i]:
					check_incant = False
				i += 1
			if check_incant is True and self.ressources[0] > 25:
				if self.try_incant() == 84:
					return 84

	def follow_incant(self, message):
		while message is None or (not "0" in message[0][8]
				and "IncantNow" in message[4]):
			if message is None:
				if self.look() == 84:
					return 84
			elif "IncantFail" is message[4] or "IncantConfirm" \
					is message[4]:
				return 0
			else:
				direction = int(message[0][8])
				if self.follow[direction] == 84:
					return 84
			message = self.check_messages("Incant")
		if "IncantFail" is message[4] or "IncantConfirm" is message[4]:
			return 0
		if self.broadcast(":" + self.team + ":" + self.id + ":"
				+ message[2] + ":IncantOk") == 84:
			return 84
		while message is None or "IncantNow" in message[4]:
			if self.look() == 84:
				return 84
		if message[4] is "IncantFail":
			return 0
		return 0



	def try_incant(self):
		nb_client = 1
		client_incant = ""
		k = 0 if (self.level == 1 or self.level % 2 == 0) else 1
		while self.ressources[0] > 15 and nb_client < (self.level - k):
			if self.broadcast(":" + self.team + self.id + ":all:"
			+ ":IncantNow:" + self.level) == 84:
				return 84
			message = self.check_messages("IncantOK")
			if message is not None:
				if client_incant is not None:
					client_incant += ","
				client_incant += message[2]
		if nb_client == (self.level - k):
			if self.do_incant(client_incant) == 84:
				return 84
		else:
			if self.broadcast(":" + self.team + self.id + ":all:" + ":IncantFail") == 84:
				return 84
			if self.broadcast(":" + self.team + self.id + ":all:" + ":IncantFail") == 84:
				return 84
			if self.broadcast(":" + self.team + self.id + ":all:" + ":IncantFail") == 84:
				return 84
		return 0

	def do_incant(self, clients):
		if self.broadcast(":" + self.team + self.id + ":all:"
				+ ":IncantConfirm:" + clients) == 84:
			return 84
		for i, j in enumerate(self.ressources_incant[self.level - 1]):
			while j != 0:
				if self.set_item(self.ressources_name[i + 1]) == 84:
					return 84
				j -=1
		if self.incantation() == 84:
			return 84
		return 0

	def search_most_food(self, loot_places):
		food_places = []
		for loot in loot_places:
			food_places.append(loot.count("food"))
		max_food = max(food_places)
		if max_food == 0:
			return -1
		max_food_places = []
		for i, foods in enumerate(food_places):
			if foods is max_food:
				max_food_places.append(i)
		return max_food_places

	def go_to_food_place(self, dest):
		nb_forward = int(math.sqrt(dest))
		for i in range(0, nb_forward):
			if self.forward() == 84:
				return 84
		pos = nb_forward * nb_forward + nb_forward
		if pos > dest:
			if self.left() == 84:
				return 84
		elif pos < dest:
			if self.right() == 84:
				return 84
		while pos != dest:
			if self.forward() == 84:
				return 84
			if pos > dest:
				pos -= 1
			else:
				pos += 1
		return 0

	def get_ressources(self):
		if self.look() == 84:
			return 84
		loot_places = self.looked.split(",")
		max_food = self.search_most_food(loot_places)
		if max_food == -1:
			if self.left() == 84:
				return 84
			if self.forward() == 84:
				return 84
			return 0
		self.go_to_food_place(max_food[0])
		for ressource in self.ressources_name:
			nb_res = loot_places[max_food[0]].count(ressource)
			i = 0
			while i < nb_res:
				if self.take_item(ressource) == 84:
					return 84
				i += 1
		return 0

	def queen(self, message):
		if message is not None and len(message) == 7 \
				and message[5] == 0:
			self.list_client = message[6]
		while (1):
			if self.get_team_slots() == 84:
				return 84
			if self.fork() == 84:
				return 84
			if self.queen_check_broadcast() == 84:
				return 84

	def queen_check_broadcast(self):
		message = self.check_messages("NewPlayer")
		if message is not None:
			if self.inventory() == 84:
				return 84
			if self.ressources[0] == 0:
				if self.broadcast(":" + self.team + ":"
						+ self.id
						+ ":NewPlayer:NewID:0:"
						+ self.list_client):
					return 84
			else:
				new_client = str(int(self.list_client[-1]) + 1)
				self.list_client += "," + new_client
				if self.broadcast(":" + self.team + ":"
						+ self.id
						+ ":NewPlayer:NewID:"
						+ new_client):
					return 84
		return 0

	def roles(self, message):
		if int(self.id) == 0:
			if self.queen(message) == 84:
				return 84
		else:
			if self.master() == 84:
				return 84
		return 0

	def check_messages(self, action):
		for message in self.memory_message:
			if ":" + self.team + ":" in message:
				m_split = message.split(":")
				if (m_split[3] is "all" or (m_split[3] == self.id)) and action in m_split[4]:
					print ("ca passe")
					self.memory_message = []
					return m_split
		self.memory_message = []
		return None

	def run(self):
		if self.broadcast(":" + self.team +
				":NewPlayer:0:NewPlayer") == 84:
			return 84
		if self.get_ressources() == 84:
			return 84
		if self.get_ressources() == 84:
			return 84
		message = self.check_messages("NewID")
		print (message)
		if message is not None:
			self.id = message[5]
		else:
			self.id = "0"
		if self.roles(message) == 84:
			return 84
		return 0



def	launch_client(ia_com, args):
	sock_fd = ia_com.init_socket()
	if (sock_fd < 0):
		return (84)
	if (ia_com.init_connection(args, sock_fd) == 84):
		return (84)
	len_team_name = ia_com.get_len_team_name(args)
	myClient = Client(sock_fd, ia_com, args, len_team_name)
	if myClient.connect(args) == 84:
		return 84
	if myClient.run() == 84:
		if myClient.check_dead() == 84:
			return 84
	return (ia_com.stop_socket(sock_fd))

def	main():
	ia_com = ctypes.CDLL('./libia.so')
	LP_c_char = ctypes.POINTER(ctypes.c_char)
	LP_LP_c_char = ctypes.POINTER(LP_c_char)
	ia_com.get_args.argtypes = (ctypes.c_int, LP_LP_c_char)
	ia_com.get_args.restype = LP_LP_c_char
	argc = len(sys.argv)
	argv = (LP_c_char * (argc + 1))()
	for i, arg in enumerate(sys.argv):
		enc_arg = arg.encode('utf-8')
		argv[i] = ctypes.create_string_buffer(enc_arg)
	if (ia_com.get_help(argc, argv) == 0):
		return (0)
	args = ia_com.get_args(argc, argv)
	if args is None:
		return (84)
	if (ia_com.check_args(args) == 84):
		return (84)
	return (launch_client(ia_com, args))

exit(main())